[tool.poetry]
name = "django-tinymce4-widget"
version = "7.0.2"
description = "A Django application that provides a TinyMCE 4 editor widget without any static files"
authors = ["Bruno Alla <alla.brunoo@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = ["django", "wysiwyg", "widget", "tinymce"]
repository = "https://github.com/browniebroke/django-tinymce4-widget"
documentation = "https://django-tinymce4-widget.readthedocs.io"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Editors",
    "Topic :: Text Processing",
    "Topic :: Text Processing :: Markup",
    "Topic :: Text Processing :: Markup :: HTML",
]
packages = [
    { include = "tinymce", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.8"
Django = ">=3.2,<5.0"
pyenchant = { version = "^3.1", optional = true }

[tool.poetry.extras]
spellcheck = ["pyenchant"]

[tool.poetry.dev-dependencies]
coverage = { version = "^7.0", extras = ["toml"] }
pytest = "^7.0"
pytest-django = "^4.5"
pytest-cov = "^4.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = ">=2.0"
sphinx = ">=6.0"
furo = ">=2023.5.20"

[tool.semantic_release]
branch = "main"
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/tinymce/__init__.py:__version__",
]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=tinymce"
pythonpath = [".", "src"]
DJANGO_SETTINGS_MODULE = "tests.settings"

[tool.coverage.run]
branch = true

[tool.coverage.report]
ignore_errors = true
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
]

[tool.ruff]
target-version = "py38"
line-length = 88
ignore = [
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "D401", # First line of docstring should be in imperative mood
]
select = [
    "B",   # flake8-bugbear
    "D",   # flake8-docstrings
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
]
[tool.ruff.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
]
"setup.py" = ["D100"]
"docs/conf.py" = ["D100"]

[tool.ruff.isort]
known-first-party = ["tinymce", "tests"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
